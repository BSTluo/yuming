/// <reference types="node" />
import { EventEmitter } from 'events';
import { ErrorEvent } from 'ws';
interface IEmissions {
    open: () => void;
    close: () => void;
    error: (error: ErrorEvent) => void;
    message: (data: string) => void;
}
export declare class WebSocket extends EventEmitter {
    private _untypedOn;
    private _untypedEmit;
    on: <K extends keyof IEmissions>(event: K, listener: IEmissions[K]) => this;
    emit: <K extends keyof IEmissions>(event: K, ...args: Parameters<IEmissions[K]>) => boolean;
    private socket;
    private isOpen;
    private allowClose;
    private logger;
    private failCount;
    constructor();
    close(): void;
    connect(): void;
    private init;
    private handleOpen;
    private handleClose;
    private handleMessage;
    private handleError;
    /**
     * @description 发送消息
     * @param data 消息内容
     */
    send(data: string): Promise<Error | undefined>;
}
export {};
