"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Config = void 0;
const path = __importStar(require("path"));
const fs = __importStar(require("fs"));
const logger_1 = require("../logger");
class Config {
    constructor(conf) {
        this.defaultConfig = {
            bot: {
                username: '用户名',
                password: '密码MD5',
                master_uid: '主人UID',
                master_name: '主人昵称',
                color: '消息气泡颜色',
                room: '房间id',
                room_password: '房间密码（无密码请留空）'
            },
            plugins: {}
        };
        this.logger = new logger_1.Logger('Config Loader');
        if (conf) {
            this.config = conf;
            return;
        }
        const cwd = process.cwd();
        const configPath = path.join(cwd, 'config.json');
        if (!fs.existsSync(configPath)) {
            this.logger.info('配置文件不存在，正在创建...');
            fs.writeFileSync(configPath, JSON.stringify(this.defaultConfig, null, 2));
            this.logger.info('配置文件创建完成，请手动修改配置文件后重新启动');
            process.exit(0);
        }
        this.logger.info('正在加载配置文件...');
        const config = JSON.parse(fs.readFileSync(configPath, 'utf-8'));
        this.logger.info('配置文件加载完成');
        this.config = config;
    }
    getConfig() {
        return this.config;
    }
    setConfig(config) {
        this.config = config;
    }
}
exports.Config = Config;
//# sourceMappingURL=config.js.map