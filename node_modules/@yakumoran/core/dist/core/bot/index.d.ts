/// <reference types="node" />
import { Config } from '../config/config';
import { EventEmitter } from 'events';
import { Music as typesMusic } from '../packet/decoder/Music';
import { Damaku as typesDamaku } from '../packet/decoder/damaku';
import { SelfMove as typesSelfMove } from '../packet/decoder/SelfMove';
import { UserList as typesUserList } from '../packet/decoder/userlist';
import { SystemMessage as typesJoinRoom } from '../packet/decoder/JoinRoom';
import { SwitchRoom as typesSwitchRoom } from '../packet/decoder/SwitchRoom';
import { SystemMessage as typesLeaveRoom } from '../packet/decoder/LeaveRoom';
import { BankCallback as typesBankCallback } from '../packet/decoder/BankCallback';
import { PublicMessage as typesPublicMessage } from '../packet/decoder/PublicMessage';
import { PrivateMessage as typesPrivateMessage } from '../packet/decoder/PrivateMessage';
import { paymentCallback as typesPaymentCallback } from '../packet/decoder/paymentCallback';
import { MediaListCallback as typesMediaListCallback } from '../packet/decoder/MediaListCallback';
import { GetUserListCallback as typesGetUserListCallback } from '../packet/decoder/GetUserListCallback';
import { UserProfileCallback as typesUserProfileCallback } from '../packet/decoder/UserProfileCallback';
import { RoomNotice as typesRoomNotice, Follower as typesFollower, Like as typesLike, Payment as typesPayment } from '../packet/decoder/MailboxMessage';
import { API } from './api';
import { Knex } from 'knex';
import { WebServer } from '../web';
import { WebForm } from '../web/WebForm';
export interface IEmissions {
    /**
     * @description 弹幕消息
     */
    Damaku(data: typesDamaku): void;
    /**
     * @description 用户进入房间
     */
    JoinRoom(data: typesJoinRoom): void;
    /**
     * @description 用户离开房间
     */
    LeaveRoom(data: typesLeaveRoom): void;
    /**
     * @description 用户切换房间
     */
    SwitchRoom(data: typesSwitchRoom): void;
    /**
     * @description 播放媒体消息
     */
    Music(data: typesMusic): void;
    /**
     * @description 私聊消息
     */
    PrivateMessage(data: typesPrivateMessage): void;
    /**
     * @description 群聊消息
     */
    PublicMessage(data: typesPublicMessage): void;
    /**
     * @description 转账成功回调(不建议手动处理回调信息，直接调用对应API等待返回值即可)
     */
    PaymentCallback(data: typesPaymentCallback): void;
    /**
     * @description 服务端推送用户列表
     */
    UserList(data: typesUserList): void;
    /**
     * @description 获取用户列表回调(不建议手动处理回调信息，直接调用对应API等待返回值即可)
     */
    GetUserListCallback(data: typesGetUserListCallback): void;
    /**
     * @description 获取用户信息回调(不建议手动处理回调信息，直接调用对应API等待返回值即可)
     */
    UserProfileCallback(data: typesUserProfileCallback): void;
    /**
     * @description 获取用户银行信息回调(不建议手动处理回调信息，直接调用对应API等待返回值即可)
     */
    BankCallback(data: typesBankCallback): void;
    /**
     * @description 获取媒体列表回调(不建议手动处理回调信息，直接调用对应API等待返回值即可)
     */
    MediaListCallback(data: typesMediaListCallback): void;
    /**
     * @description 机器人账号移动至其他房间(不建议插件处理此事件，核心部分已经处理好了机器人的重连和重连后的房间切换)
     */
    SelfMove(data: typesSelfMove): void;
    /**
     * @description 星标发送的房间公告
     */
    RoomNotice(data: typesRoomNotice): void;
    /**
     * @description 新增关注
     */
    Follower(data: typesFollower): void;
    /**
     * @description 新增点赞
     */
    Like(data: typesLike): void;
    /**
     * @description 其他人向机器人转账
     */
    Payment(data: typesPayment): void;
    /**
     * @description 登录成功
     */
    Login(): void;
    /**
     * @description 机器人接收到的所有事件
     * @param event 事件名称
     * @param data 事件数据
     */
    __ALL__(event: keyof IEmissions, data: any): void;
}
export declare class Bot extends EventEmitter {
    private decoder;
    private socket;
    private logger;
    private config;
    private _untypedOn;
    private _untypedEmit;
    on: <K extends keyof IEmissions>(event: K, listener: IEmissions[K]) => this;
    emit: <K extends keyof IEmissions>(event: K, ...args: Parameters<IEmissions[K]>) => boolean;
    api: API;
    db: Knex;
    web: WebServer;
    private webMenus;
    constructor(config: Config);
    /**
     * @description 创建页面(会直接显示在菜单栏左侧)
     * @param id ID
     * @param title 标题
     * @param icon 图标(填写fontawesome class)
     * @returns
     */
    createForm(id: string, title: string, icon: string): WebForm;
    /**
     * @description 删除页面
     * @param form 页面对象
     */
    deleteForm(form: WebForm): void;
    _initWeb(): void;
}
