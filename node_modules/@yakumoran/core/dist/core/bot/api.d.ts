import { Bot } from '.';
import { Config } from '../config/config';
import { WebSocket } from '../network';
import { GetUserListCallback } from '../packet/decoder/GetUserListCallback';
import { MediaListCallback } from '../packet/decoder/MediaListCallback';
import { UserProfileCallback } from '../packet/decoder/UserProfileCallback';
export declare class API {
    private socket;
    private encoder;
    private config;
    private logger;
    private bot;
    constructor(socket: WebSocket, config: Config, bot: Bot);
    /**
   * @description 发送群聊消息
   * @param message 消息内容
   * @param color 颜色
   * @returns {Promise}
   */
    sendPublicMessage(message: string, color?: string): Promise<Error | undefined>;
    /**
     * @description 发送私聊消息
     * @param message 消息内容
     * @param color 颜色
     * @returns {Promise}
     */
    sendPrivateMessage(uid: string, message: string, color?: string): Promise<Error | undefined>;
    /**
     * @description 发送弹幕
     * @param message 消息内容
     * @param color 颜色
     * @returns {Promise}
     */
    sendDamaku(message: string, color: string): Promise<Error | undefined>;
    /**
     * @description 点赞
     * @param uid uid
     * @param message 消息内容
     * @returns {Promise}
     */
    like(uid: string, message?: string): Promise<Error | undefined>;
    /**
     * @description 转账
     * @param uid uid
     * @param money 金额
     * @param message 备注
     * @returns {Promise}
     */
    payment(uid: string, money: number, message: string): Promise<Error | undefined>;
    /**
     * @description 发送媒体
     * @param type 类型
     * @param title 标题
     * @param signer 歌手
     * @param cover 封面
     * @param link 链接
     * @param url 资源链接
     * @param duration 时长（秒）
     * @param BitRate 比特率
     * @param color 颜色
     * @returns {[Promise, Promise]}
     */
    sendMedia(type: 'music' | 'video', title: string, signer: string, cover: string, link: string, url: string, duration: number, BitRate: number, color: string): Promise<Error | undefined>[];
    getUserList(): Promise<GetUserListCallback[]>;
    /**
     * @description 获取用户资料
     * @param username 用户名
     * @returns {Promise}
     */
    getUserProfile(username: string): Promise<UserProfileCallback>;
    /**
     * @description 获取媒体列表
     * @returns {Promise}
     */
    getMediaList(): Promise<MediaListCallback[]>;
    /**
     * @description 黑名单
     * @param username 用户名
     * @param time 时长，与花园写法一致
     * @param msg 备注
     */
    blackList(username: string, time: string, msg?: string): void;
    /**
     * @description 踢人
     * @param username 用户名
     */
    kick(username: string): void;
    /**
     * @description 禁言
     * @param type 类型
     * @param username 用户名
     * @param time 时长，与花园一致
     * @param msg 备注
     */
    mute(type: 'chat' | 'music' | 'all', username: string, time: string, msg: string): void;
    /**
     * @description 发送房间公告
     * @param msg 消息内容
     */
    notice(msg: string): void;
    /**
     * @description 设置房间最大人数
     * @param num 人数，不填则为不限人数
     */
    setMaxUser(num?: number): void;
    /**
     * @description 白名单
     * @param username 用户名
     * @param time 时长，与花园写法一致
     * @param msg 备注
     */
    whiteList(username: string, time: string, msg?: string): void;
    /**
     * @description 清空媒体
     */
    clear(): void;
    /**
     * @description 切除媒体
     * @param id 媒体id,不填则为当前媒体
     */
    cut(id?: string): void;
    /**
     * @description 交换两个媒体的位置
     * @param id1 第一个id
     * @param id2 第二个id
     */
    exchange(id1: string, id2: string): void;
    /**
     * @description 跳转到指定时间
     * @param time 目标时间，与花园写法一致
     */
    goto(time: string): void;
    /**
     * @description 媒体快进快退
     * @param op 操作类型
     * @param time 操作时间，与花园写法一致
     */
    operation(op: '<' | '>', time: string): void;
    /**
     * @description 移动到指定位置
     */
    moveTo(room: string, password: string): void;
}
