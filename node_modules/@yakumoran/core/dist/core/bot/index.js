"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Bot = void 0;
const packet_1 = require("../packet");
const network_1 = require("../network");
const events_1 = require("events");
const logger_1 = require("../logger");
const global_1 = require("../global");
const api_1 = require("./api");
const knex_1 = require("knex");
const web_1 = require("../web");
const WebForm_1 = require("../web/WebForm");
const express_1 = require("express");
class Bot extends events_1.EventEmitter {
    constructor(config) {
        super();
        this.logger = new logger_1.Logger('Bot Core');
        this._untypedOn = this.on;
        this._untypedEmit = this.emit;
        this.on = (event, listener) => this._untypedOn(event, listener);
        this.emit = (event, ...args) => this._untypedEmit(event, ...args);
        this.webMenus = [];
        this.config = config;
        this.decoder = new packet_1.Decoder();
        this.socket = new network_1.WebSocket();
        this.api = new api_1.API(this.socket, this.config, this);
        this.db = (0, knex_1.knex)(this.config.getConfig().database);
        this.web = new web_1.WebServer(this.config.getConfig().bot.port);
        // 开始处理事件
        this.socket.on('message', (packet) => {
            const result = this.decoder.autoDecoder(packet);
            if (!result) {
                this.logger.warn(`收到了无法解析的数据包: ${packet.length > 50 ? packet.slice(0, 50) + '...' : packet}`);
                return;
            }
            for (const [event, data] of result) {
                this.emit(event, data);
                this.emit('__ALL__', event, data);
            }
        });
        // 机器人登录
        this.socket.on('open', async () => {
            this.logger.info('登陆中...');
            const username = this.config.getConfig().bot.username;
            const password = this.config.getConfig().bot.password;
            const room = this.config.getConfig().bot.room;
            const roomPassword = this.config.getConfig().bot.room_password;
            // 处理服务器返回的第一个包
            this.socket.once('message', (msg) => {
                if (msg === '%*"2') {
                    this.logger.fatal('登录失败，密码错误');
                    process.exit(1);
                }
                else if (msg === '%*"1') {
                    this.logger.fatal('登录失败，用户不存在');
                    process.exit(1);
                }
                else if (msg === '%*"0') {
                    // 这种错误真的需要处理吗(?)
                    this.logger.fatal('登录失败，此名字已被占用');
                    process.exit(1);
                }
                else if (msg.startsWith('%*"s')) {
                    const room = msg.substring(4).split('>')[0];
                    this.logger.warn(`登录失败，机器人已在房间 ${room} 中，正在尝试移动至 ${room}`);
                    this.api.moveTo(room, '');
                }
                else {
                    this.logger.info('收到服务器返回数据, 登录成功');
                    this.logger.debug('咱的聊天群：700080009');
                    this.emit('Login');
                }
            });
            const packet = new packet_1.Encoder().system.login(username, password, room, roomPassword);
            this.socket.send(packet);
            this.logger.info('登录包已发送，等待服务器响应...');
        });
        const username = this.config.getConfig().bot.username;
        global_1.globalInstances[username] = this;
        this._initWeb();
        this.on('SelfMove', data => {
            const room = data.id;
            this.logger.info(`机器人已移动至 > ${room}`);
            this.api.moveTo(room, '');
        });
    }
    /**
     * @description 创建页面(会直接显示在菜单栏左侧)
     * @param id ID
     * @param title 标题
     * @param icon 图标(填写fontawesome class)
     * @returns
     */
    createForm(id, title, icon) {
        const form = new WebForm_1.WebForm(this.web, id);
        this.webMenus.push({ id, title, icon });
        return form;
    }
    /**
     * @description 删除页面
     * @param form 页面对象
     */
    deleteForm(form) {
        this.webMenus = this.webMenus.filter((item) => item.id !== form.id);
        form._destroy();
    }
    _initWeb() {
        const route = (0, express_1.Router)();
        route.get('/menu', (req, res) => {
            res.json(this.webMenus);
        });
        this.web.route('/api/core', route);
    }
}
exports.Bot = Bot;
//# sourceMappingURL=index.js.map