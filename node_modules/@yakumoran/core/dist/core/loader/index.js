"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PluginLoader = exports.globalPlugins = void 0;
const isAsync_1 = require("../utils/isAsync");
exports.globalPlugins = new Map();
class PluginLoader {
    constructor(bot, app, config) {
        this.plugins = [];
        this.bot = bot;
        this.app = app;
        this.config = config;
        // 处理插件上的装饰器
        this.bot.on('__ALL__', async (event, args) => {
            // 中间件
            const middlewares = this.app.decorators.middlewares.get(event) || [];
            for (const middleware of middlewares) {
                if (middleware.inBottom)
                    continue;
                let next = true;
                const username = this.config.getConfig().bot.username;
                const constructor = middleware._this.constructor.name;
                const plguinInstance = exports.globalPlugins.get(username)?.get(constructor);
                if ((0, isAsync_1.isAsync)(middleware.handle)) {
                    [next, args] = await middleware.handle.bind(plguinInstance)(args);
                }
                else {
                    [next, args] = middleware.handle.bind(plguinInstance)(args);
                }
                if (!next)
                    return;
            }
            if ((event === 'PublicMessage' || event === 'PrivateMessage') && args.isRobot === false) {
                // 处理命令
                const commands = this.app.decorators.commands.filter(command => {
                    if (event === 'PrivateMessage')
                        return command.options.privateChat !== false;
                    if (event === 'PublicMessage')
                        return command.options.publicChat !== false;
                    return true;
                });
                for (const command of commands) {
                    const username = this.config.getConfig().bot.username;
                    const constructor = command._this.constructor.name;
                    const plguinInstance = exports.globalPlugins.get(username)?.get(constructor);
                    const data = args;
                    const message = data.message;
                    if (command.options.command.test(message)) {
                        let next = true;
                        if ((0, isAsync_1.isAsync)(command.handle)) {
                            next = await command.handle.bind(plguinInstance)(data, command.options.command.exec(message));
                        }
                        else {
                            next = command.handle.bind(plguinInstance)(data, command.options.command.exec(message));
                        }
                        command.options.command.lastIndex = 0;
                        if (next === false)
                            return;
                    }
                }
            }
            // 事件监听器
            const listeners = this.app.decorators.events.get(event) || [];
            for (const listener of listeners) {
                const username = this.config.getConfig().bot.username;
                const constructor = listener._this.constructor.name;
                const plguinInstance = exports.globalPlugins.get(username)?.get(constructor);
                if (listener.robot === false && args.isRobot)
                    continue;
                if ((0, isAsync_1.isAsync)(listener.handle)) {
                    await listener.handle.bind(plguinInstance)(args);
                }
                else {
                    listener.handle.bind(plguinInstance)(args);
                }
            }
            // 中间件
            for (const middleware of middlewares) {
                const username = this.config.getConfig().bot.username;
                const constructor = middleware._this.constructor.name;
                const plguinInstance = exports.globalPlugins.get(username)?.get(constructor);
                if (!middleware.inBottom)
                    continue;
                if ((0, isAsync_1.isAsync)(middleware.handle)) {
                    args = await middleware.handle.bind(plguinInstance)(args);
                }
                else {
                    args = middleware.handle.bind(plguinInstance)(args);
                }
            }
        });
    }
    load(name, plugin) {
        if (!plugin)
            plugin = require(name).default;
        if (!plugin)
            return;
        const Plugin = plugin(this.app);
        const p = new Plugin(this.bot);
        this.plugins.push(p);
        p.app = this.bot;
        p.config = this.config;
        p.init();
        const username = this.config.getConfig().bot.username;
        const constructor = p.constructor.name;
        if (!exports.globalPlugins.has(username)) {
            exports.globalPlugins.set(username, new Map());
        }
        const plugins = exports.globalPlugins.get(username);
        if (plugins.has(constructor)) {
            throw new Error(`插件 ${constructor} 已经存在`);
        }
        plugins.set(constructor, p);
    }
    getPlugins() {
        return this.plugins;
    }
}
exports.PluginLoader = PluginLoader;
//# sourceMappingURL=index.js.map