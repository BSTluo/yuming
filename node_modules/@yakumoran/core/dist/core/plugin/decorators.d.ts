import { Plugin } from '.';
import { IEmissions } from '../bot/index';
interface ExtendsPlugin extends Plugin {
    [key: string]: any;
}
interface CommandOptions {
    name: string;
    desc: string;
    usage: string;
    command: RegExp;
    privateChat?: boolean;
    publicChat?: boolean;
}
interface Command {
    options: CommandOptions;
    handle: Function;
    _this: ExtendsPlugin;
}
interface Middleware {
    event: keyof IEmissions;
    handle: Function;
    inBottom: boolean;
    _this: ExtendsPlugin;
}
interface EventListener {
    event: keyof IEmissions;
    handle: Function;
    _this: ExtendsPlugin;
    robot?: boolean;
}
export declare class Decorators {
    commands: Command[];
    middlewares: Map<string, Middleware[]>;
    events: Map<string, EventListener[]>;
    /**
     * @description 注册命令(需要返回一个boolean值，表示是否继续执行后续命令和中间件)
     * @param command 命令选项
     */
    Command(command: CommandOptions): (target: ExtendsPlugin, propertyKey: keyof ExtendsPlugin, descriptor: PropertyDescriptor) => void;
    /**
     * @description 注册中间件
     * @param event 事件名
     * @param inBottom 是否在最后执行
     */
    Middleware(event: keyof IEmissions, inBottom?: boolean): (target: ExtendsPlugin, propertyKey: keyof ExtendsPlugin, descriptor: PropertyDescriptor) => void;
    /**
     * @description 注册事件监听器
     * @param event 事件名
     */
    EventListener(event: keyof IEmissions, robot?: boolean): (target: ExtendsPlugin, propertyKey: keyof ExtendsPlugin, descriptor: PropertyDescriptor) => void;
}
export {};
