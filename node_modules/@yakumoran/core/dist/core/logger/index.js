"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Logger = void 0;
const log4js = __importStar(require("log4js"));
const conf = {
    appenders: {
        file: {
            type: 'file',
            filename: 'logs/default',
            alwaysIncludePattern: true,
            pattern: 'yyyy-MM-dd.log'
        },
        console: {
            type: 'console'
        }
    },
    categories: {
        default: {
            appenders: ['file', 'console'],
            level: process.env.LOG_LEVEL || 'info'
        }
    }
};
log4js.configure(conf);
class Logger {
    constructor(category) {
        const logger = log4js.getLogger(category);
        this.trace = logger.trace.bind(logger);
        this.debug = logger.debug.bind(logger);
        this.info = logger.info.bind(logger);
        this.warn = logger.warn.bind(logger);
        this.error = logger.error.bind(logger);
        this.fatal = logger.fatal.bind(logger);
    }
}
exports.Logger = Logger;
//# sourceMappingURL=index.js.map